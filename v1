import pygame
import sys
import random

# Inicialização do Pygame
pygame.init()

# Constantes
SCREEN_WIDTH, SCREEN_HEIGHT = 800, 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)  # Adicionamos a cor azul para o jogador
GRAY = (200, 200, 200)  # Cor inicial para os quadrados
FONT_SIZE = 24
NUM_ROUNDS = 20  # Aumentamos o número de rodadas para 20
SQUARE_SIZE = 30
SQUARE_SPACING = 5

# Configuração da tela
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Prisoner's Dilemma")

# Configuração da fonte
font = pygame.font.Font(None, FONT_SIZE)

# Variáveis de jogo
player_choice = None
computer_choice = None
outcome = ""
player_score = 0
computer_score = 0
round_count = 0
player_moves = []
computer_moves = []
waiting_for_player = False  # Variável para verificar se o jogador deve fazer a jogada

# Função para desenhar texto
def draw_text(text, pos, color=BLACK):
    label = font.render(text, True, color)
    screen.blit(label, pos)

# Função para gerar a escolha do computador
def get_computer_choice():
    return random.choice(["Cooperate", "Defect"])

# Função para determinar o resultado da rodada
def determine_outcome(player, computer):
    global player_score, computer_score
    if player == "Cooperate" and computer == "Cooperate":
        player_score += 2
        computer_score += 2
        return "Both Cooperate: 2 Points Each"
    elif player == "Cooperate" and computer == "Defect":
        computer_score += 3
        return "You Cooperate, Computer Defects: 0 Points You, 3 Points Computer"
    elif player == "Defect" and computer == "Cooperate":
        player_score += 3
        return "You Defect, Computer Cooperates: 3 Points You, 0 Points Computer"
    elif player == "Defect" and computer == "Defect":
        player_score += 1
        computer_score += 1
        return "Both Defect: 1 Point Each"

# Função para desenhar o placar
def draw_scoreboard():
    for i in range(NUM_ROUNDS):
        # Cor dos quadrados do computador
        color = GRAY  # Inicia com cinza
        if i < len(computer_moves):
            color = GREEN if computer_moves[i] == "Cooperate" else RED
        pygame.draw.rect(screen, color, (20 + i * (SQUARE_SIZE + SQUARE_SPACING), 200, SQUARE_SIZE, SQUARE_SIZE))
        
        # Cor dos quadrados do jogador
        color = GRAY  # Inicia com cinza
        if i < len(player_moves):
            color = GREEN if player_moves[i] == "Cooperate" else RED
        pygame.draw.rect(screen, color, (20 + i * (SQUARE_SIZE + SQUARE_SPACING), 250, SQUARE_SIZE, SQUARE_SIZE))

# Função para desenhar os bonecos e as placas
def draw_characters():
    # Desenho do boneco do jogador
    pygame.draw.circle(screen, BLUE, (150, 350), 20)  # Cabeça do jogador
    pygame.draw.rect(screen, BLUE, (140, 370, 20, 40))  # Corpo do jogador
    pygame.draw.line(screen, BLUE, (140, 410), (130, 430), 2)  # Braço esquerdo
    pygame.draw.line(screen, BLUE, (160, 410), (170, 430), 2)  # Braço direito
    pygame.draw.line(screen, BLUE, (140, 410), (140, 450), 2)  # Perna esquerda
    pygame.draw.line(screen, BLUE, (160, 410), (160, 450), 2)  # Perna direita

    # Desenha a placa do jogador
    if player_choice == "Cooperate":
        pygame.draw.rect(screen, GREEN, (110, 310, 80, 30))  # Placa cooperar
        draw_text("Cooperate", (120, 315), BLACK)
    elif player_choice == "Defect":
        pygame.draw.rect(screen, RED, (110, 310, 80, 30))  # Placa defeito
        draw_text("Defect", (140, 315), BLACK)

    # Desenho do boneco do computador
    pygame.draw.circle(screen, GREEN, (650, 350), 20)  # Cabeça do computador
    pygame.draw.rect(screen, GREEN, (640, 370, 20, 40))  # Corpo do computador
    pygame.draw.line(screen, GREEN, (640, 410), (630, 430), 2)  # Braço esquerdo
    pygame.draw.line(screen, GREEN, (660, 410), (670, 430), 2)  # Braço direito
    pygame.draw.line(screen, GREEN, (640, 410), (640, 450), 2)  # Perna esquerda
    pygame.draw.line(screen, GREEN, (660, 410), (660, 450), 2)  # Perna direita

    # Desenha a placa do computador
    if computer_choice == "Cooperate":
        pygame.draw.rect(screen, GREEN, (620, 310, 80, 30))  # Placa cooperar
        draw_text("Cooperate", (630, 315), BLACK)
    elif computer_choice == "Defect":
        pygame.draw.rect(screen, RED, (620, 310, 80, 30))  # Placa defeito
        draw_text("Defect", (650, 315), BLACK)

# Loop principal do jogo
running = True
while running:
    screen.fill(WHITE)

    # Manipulação de eventos
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            pygame.quit()
            sys.exit()
        
        elif event.type == pygame.KEYDOWN and round_count < NUM_ROUNDS:
            if not waiting_for_player:  # Turno do computador
                computer_choice = get_computer_choice()
                computer_moves.append(computer_choice)
                waiting_for_player = True  # Espera pela jogada do jogador
                
            elif waiting_for_player:  # Turno do jogador
                if event.key == pygame.K_c:
                    player_choice = "Cooperate"
                    outcome = determine_outcome(player_choice, computer_choice)
                    player_moves.append(player_choice)
                    round_count += 1
                    waiting_for_player = False  # Volta para o turno do computador
                elif event.key == pygame.K_d:
                    player_choice = "Defect"
                    outcome = determine_outcome(player_choice, computer_choice)
                    player_moves.append(player_choice)
                    round_count += 1
                    waiting_for_player = False  # Volta para o turno do computador

    # Desenhar o placar visual e o texto de status
    draw_scoreboard()
    draw_text("Pressione C para Cooperar, D para Não Cooperar", (20, 20))
    draw_text(f"Pontuação do Jogador: {player_score}", (20, 60))
    draw_text(f"Pontuação do Computador: {computer_score}", (20, 100))
    draw_text(f"Rodadas Jogadas: {round_count}/{NUM_ROUNDS}", (20, 140))
    
    if outcome:
        draw_text(f"Resultado: {outcome}", (20, 180))
    
    if waiting_for_player:
        draw_text("Sua vez! Escolha: C para Cooperar ou D para Não Cooperar", (20, 300))

    # Desenhar os bonecos e as placas
    draw_characters()

    # Atualizar a tela
    pygame.display.flip()

pygame.quit()



